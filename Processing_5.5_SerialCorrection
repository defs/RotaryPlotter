//Import Library for Serial Communication
import processing.serial.*;

//Initiate Variables for Image Processing
PImage testImage;
int rows;
int columns;

//Setup Function, actually the only one that will run in this sketch
void setup() {
  size(221,800);
  
  //LOAD AND PREPARE IMAGE
  testImage = loadImage("IMAGE_NAME_HERE.jpg");
  testImage.filter(GRAY);
  testImage.resize(221, 0);  //221 is the number of dots per row; calculated manually from Arduino inputs.
  testImage.loadPixels();
  rows = testImage.height;
  columns = testImage.width;

  //Set Up Serial Communication
  myPort = new Serial(this, Serial.list()[0], 9600);
  
  //Pause until receive '!' signal from Arduino, saying it is ready to receive stream.
  int goCheck = 0;
  while (goCheck != '!') {
    delay(1);
    goCheck = myPort.read();
  }  
  myPort.clear();
  
  //Code iterating through loaded image, printing to Arduino. Starts from bottom right corner of image.
  for(int i = (testImage.pixels.length - 1); i >= 0; i--) {
    color pixelColor = testImage.pixels[i];
    float greyValue = red(pixelColor);
    int xDot = abs((i%221) - 221);
    int yDot = rows - ( ( i - (i % 221) ) / 221 ); 
    int depth;
    if (greyValue > 232) {depth=0;} else
    if (greyValue > 209 && greyValue <=232) {depth=1;} else
    if (greyValue > 186 && greyValue <=209) {depth=2;} else
    if (greyValue > 163 && greyValue <=186) {depth=3;} else
    if (greyValue > 140 && greyValue <=163) {depth=4;} else
    if (greyValue > 117 && greyValue <=140) {depth=5;} else
    if (greyValue > 94 && greyValue <=117) {depth=6;} else
    if (greyValue > 71 && greyValue <=94) {depth=7;} else
    if (greyValue > 48 && greyValue <=71) {depth=8;} else
    if (greyValue > 25 && greyValue <=48) {depth=9;} else
    if (greyValue >= 0 && greyValue <=25) {depth=10;}
    int sumCheck = (xDot + yDot + depth)%221;
    writeDotDraw(xDot,yDot,depth,sumCheck);
    while (myPort.available() <= 0) {
      delay(1);
    }
    int check = myPort.read();
    while (check != '!') {
      myPort.write(xDot);
      myPort.write(yDot);
      myPort.write(depth);
      myPort.write(sumCheck);
      while (myPort.available() <=0) {
        delay(1);
      }
      check = myPort.read();
    }  
    myPort.clear();
  }
}

//FUNCTIONS

  //Serial Communication Functions

void writeDotDraw(int x, int y, int depth, int sumCheck) {
  myPort.write(4);
  myPort.write(x);
  myPort.write(y);
  myPort.write(depth);
  myPort.write(sumCheck);
  }

  //Accessory Functions

int roundDown(int x) {
  int roundedDown = x - (x%1);
  return roundedDown;
}
