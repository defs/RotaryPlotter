
import processing.serial.*;
Serial myPort;
String val;
boolean firstContact = false;
PImage testImage;
int rows;
int columns;

void setup() {
  size(221,800);

//Set Up Serial Communication
  //printArray(Serial.list());
  myPort = new Serial(this, Serial.list()[0], 9600);
  myPort.bufferUntil('!');
  delay(2000);

//LOAD AND PREPARE IMAGE
  testImage = loadImage("IMAGE_NAME_HERE.jpg");
  testImage.filter(GRAY);
  testImage.resize(221, 0);
  testImage.loadPixels();
  rows = testImage.height;
  columns = testImage.width;
  
  for(int i = (testImage.pixels.length - 1); i >= 0; i--) {
    color pixelColor = testImage.pixels[i];
    float greyValue = red(pixelColor);
    int xDot = abs((i%221) - 221);
    int yDot = rows - ( ( (i+1) - ((i+1) % 221) ) / 221 ) + 1;
    int depth = 0;
    int delay = 0;
    if (greyValue > 232) {depth=0; delay = 200;} else
    if (greyValue > 209 && greyValue <=232) {depth=1; delay = 100;} else
    if (greyValue > 186 && greyValue <=209) {depth=2; delay = 2000;} else
    if (greyValue > 163 && greyValue <=186) {depth=3; delay = 2600;} else
    if (greyValue > 140 && greyValue <=163) {depth=4; delay = 3200;} else
    if (greyValue > 117 && greyValue <=140) {depth=5; delay = 3800;} else
    if (greyValue > 94 && greyValue <=117) {depth=6; delay = 4400;} else
    if (greyValue > 71 && greyValue <=94) {depth=7; delay = 5000;} else
    if (greyValue > 48 && greyValue <=71) {depth=8; delay = 5600;} else
    if (greyValue > 25 && greyValue <=48) {depth=9; delay = 6200;} else
    if (greyValue >= 0 && greyValue <=25) {depth=10; delay = 6800;}
    writeDotDraw(xDot,yDot,depth);
    delay(delay);
  }
}


//void draw() {
//}

//FUNCTIONS

  //Serial Functions

void writeDotDraw(int x, int y, int depth) {
  myPort.write(4);
  myPort.write(x);
  myPort.write(y);
  myPort.write(depth);
  }


void serialEvent(Serial myPort) {
  val = myPort.readStringUntil('\n');
  if (val != null) {
    val = trim(val);
  }
  if (firstContact == false) {
    if (val.equals("A")) {
      myPort.clear();
      firstContact = true;
    }
  }
}

  //Accessory Functions

int roundDown(int x) {
  int roundedDown = x - (x%1);
  return roundedDown;
}
