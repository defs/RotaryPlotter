//Include Servo Motor Control Library
#include <Servo.h>

//Define pin functions on Arduino
  //Limit Switch used to determine X-axis position of motor.
#define limitSwitch 13
  //X-Axis Stepper Motor Pins, note that MS Pathways are not defined because hardwired HIGH off 5v power as desired.
#define XStp 5
#define XDir 4
  //Y-Axis Stepper Motor Pins, note that MS Pathways are not defined because hardwired HIGH off 5v power as desired.
#define YStp 3
#define YDir 2

//Declare Servo Motor
Servo servoMotor;
 
//Declare variables for functions
  //Used by Serial Connection to communicate
char user_input;
   //Tracks Position of Motors, relative to start times. xStepperPosition initially set via xStepperReset. yStepperPosition set by physicial location on startup.
int xStepperPosition;
int yStepperPosition;
int servoPosition;

  //Manual Inputs of Appropriate Values for various hardware components
    //Servo state variables set the height of the piston necessary for various functions.
int servoUpState = 70;
int servoDownState = 55;
int servoLoadState = 90;
    //Manual input of total number of steps available to X Axis and desired Bit Depth, followed by various things that occur because of this
int xSteps = 4420; 
int dotBitDepth = 11;  
int stepsPerDot = (dotBitDepth - 1) * 2;
int xDots = (xSteps - (xSteps % stepsPerDot)) / stepsPerDot;
int margin = (xSteps % stepsPerDot) - ((xSteps % stepsPerDot) % 2) / 2;

//Setup Functions
void setup() {

  //Open Serial Port
  Serial.begin(9600);
  Serial.println("Hello!");
  
  //Set Pin Functions
    //Limit Switch Setup
  pinMode(limitSwitch, INPUT);

    //X-Axis Stepper Motor Pins
  pinMode(XStp, OUTPUT);
  pinMode(XDir, OUTPUT);

    //Y-Axis Stepper Motor Pins
  pinMode(YStp, OUTPUT);
  pinMode(YDir, OUTPUT);
  
  //Servo Motor Setup and Initial Position
  servoMotor.attach(12);
  Serial.println("Load piston, then hit the limit switch.");
  servoLoad();  
  
  //Set Default State for Stepper Pins. At the moment, only sets Stp to LOW so can initiate step.
  xStepperPinReset();
  yStepperPinReset();
    
  //Pull X-Axis Stepper to Home Position
  yStepForward(500);
  yStepBackward(500);
  yStepperPosition = 0;
  Serial.println("Y Ready");
  xStepForward(1000);
  xStepBackward(500);
  Serial.println("X Ready");
  delay(100);
  xStepperReset();
  Serial.println("Everything's a go!");
}

//Main Loop that actually executes while MicroController is powered.
void loop() {
  drawDot(5,11);
  drawDot(6,10);
  drawDot(7,8);
  drawDot(8,6);
  drawDot(9,4);
  drawDot(10,2);
  drawDot(11,11);
  delay(10000);
}

//Define Functions Used in Main Loop

void xStepperPinReset() {
  digitalWrite(XStp, LOW);
}
  
void yStepperPinReset() {
  digitalWrite(YStp, LOW);
}

void xStepForward(int y) {
  digitalWrite(XDir,HIGH);
  for(int x = 0; x < y; x++) {
    digitalWrite(XStp,HIGH);
    delay(1);
    digitalWrite(XStp,LOW);
    delay(1);
    xStepperPosition = xStepperPosition + 1;
  }
}

void xStepBackward(int y) {
  digitalWrite(XDir,LOW);
  for(int x = 0; x < y; x++) {
    digitalWrite(XStp,HIGH);
    delay(1);
    digitalWrite(XStp,LOW);
    delay(1);
    xStepperPosition = xStepperPosition - 1;
  }
}

void xStepperReset() {
  xStepForward(10);
  while(digitalRead(limitSwitch)) {
    xStepBackward(1);
    delay(1);
  }
  xStepperPosition = 0;
}

void yStepForward(int y) {
  digitalWrite(YDir,HIGH);
  for(int x = 0; x < y; x++) {
    digitalWrite(YStp,HIGH);
    delay(1);
    digitalWrite(YStp,LOW);
    delay(1);
    yStepperPosition = yStepperPosition + 1;
  }
}

void yStepBackward(int y) {
  digitalWrite(YDir, LOW);
  for(int x = 0; x < y; x++) {
    digitalWrite(YStp,HIGH);
    delay(1);
    digitalWrite(YStp,LOW);
    delay(1);
    yStepperPosition = yStepperPosition - 1;
  }
}

void servoLoad() {
  while(digitalRead(limitSwitch)){
    servoMotor.write(servoLoadState);
  }
  servoMotor.write(servoUpState);
}

void xSet(int x) {
  int reqDelta = x - xStepperPosition;
  if (reqDelta >= 0) {
    xStepForward(abs(reqDelta));
  }
  else {
    xStepBackward(abs(reqDelta));
  }
}

void ySet(int y) {
  int reqDelta = y - yStepperPosition;
  if (reqDelta >= 0) {
    yStepForward(abs(reqDelta));
  }
  else {
    yStepBackward(abs(reqDelta));
  }
}

//Draws boxes to specific bit depth, 0 equals white
void drawDot(int dot, int depth) { 
  int xDotStartingPosition = margin + 1 + (stepsPerDot * (dot - 1));
  int xDotCenter = xDotStartingPosition + roundDown((stepsPerDot - 1) / 2);
  xSet(xDotCenter);
  int yDotCenter = yStepperPosition + roundDown((stepsPerDot - 1) / 2);
  ySet(yDotCenter);
  for(int x = 1; x <= depth; x++) {
    servoMotor.write(servoDownState);
    delay(100);
    xStepForward((2 * x) - 2);
    delay(100);
    yStepForward((2 * x) - 2);
    delay(100);
    xStepBackward((2 * x) - 2);
    delay(100);
    yStepBackward((2 * x) - 2);
    delay(100);
    servoMotor.write(servoUpState);
    xStepBackward(1);
    delay(100);
    yStepBackward(1);
    delay(100);
  }    
}

int roundDown(int x) {
  return x - (x % 1);
}
